{"version":3,"file":"events.spec.js","sourceRoot":"","sources":["../../test/events.spec.ts"],"names":[],"mappings":";;AAAA,gCAAqC;AAErC,QAAQ,CAAE,gBAAgB,EAAE,GAAG,EAAE;IAC7B,EAAE,CAAE,0CAA0C,EAAE,GAAG,EAAE;QACjD,MAAM,KAAK,GAAG;YACV,IAAI,EAAE,YAAY;YAClB,IAAI,EAAE;gBACF,KAAK,EAAE,CAAC;aACX;SACJ,CAAA;QAED,kBAAY,CAAC,WAAW,CAAE,KAAK,CAAC,IAAI,EAAE,CAAE,IAAuB,EAAG,EAAE;YAChE,MAAM,CAAE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAE,CAAC,OAAO,CAAE,IAAI,CAAC,KAAK,CAAE,CAAA;QACpD,CAAC,CAAE,CAAA;QAEH,kBAAY,CAAC,IAAI,CAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAE,CAAA;IAC/C,CAAC,CAAE,CAAA;AACP,CAAC,CAAE,CAAA","sourcesContent":["import { EventEmitter } from '../src'\n\ndescribe( 'Global Emitter', () => {\n    it( 'should be able to emit an event globally', () => {\n        const event = {\n            name: 'test-event',\n            data: {\n                value: 1\n            }\n        }\n\n        EventEmitter.addListener( event.name, ( data: { value: number } ) => {\n            expect( event.data.value ).toEqual( data.value )\n        } )\n\n        EventEmitter.emit( event.name, event.data )\n    } )\n} )"]}