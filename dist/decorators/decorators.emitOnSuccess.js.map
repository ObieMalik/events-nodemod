{"version":3,"file":"decorators.emitOnSuccess.js","sourceRoot":"","sources":["../../src/decorators/decorators.emitOnSuccess.ts"],"names":[],"mappings":";;AAAA,4BAA2B;AAE3B,oDAA+C;AAE/C,0BAAuB;AACvB,0BAAuB;AAEvB,uBAA+B,KAAa,EAAE,cAAuB,KAAK,EAAE,IAAU;IAClF,OAAO,UAAW,MAAW,EAAE,WAAmB;QAC9C,IAAI,gBAAgB,GAAG,MAAM,CAAE,WAAW,CAAE,CAAA;QAE5C,OAAO,MAAM,CAAE,WAAW,CAAE,GAAG,UAAW,GAAG,IAAW;YACpD,IAAI,OAAO,GAAG,gBAAgB,CAAC,KAAK,CAAE,IAAI,EAAE,IAAI,CAAE,CAAA;YAClD,OAAO;iBACF,IAAI,CAAE,CAAE,QAAa,EAAG,EAAE;gBACvB,IAAI,OAAO,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAA;gBAEhC,IAAK,WAAW,EAAG;oBAAE,OAAO,GAAG,CAAC,CAAC,MAAM,CAAE,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAE,CAAA;iBAAE;gBACpE,IAAK,IAAI,EAAG;oBAAE,OAAO,GAAG,CAAC,CAAC,MAAM,CAAE,OAAO,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAE,CAAA;iBAAE;gBAE5D,IAAI;oBACA,IAAI,MAAM,GAAG,4BAAY,CAAC,IAAI,CAAE,KAAK,EAAE,OAAO,CAAE,CAAA;oBAChD,IAAK,CAAC,MAAM,IAAI,MAAM,KAAK,SAAS,EAAG;wBACnC,MAAM,IAAI,SAAS,CAAE,8BAA8B,CAAE,CAAA;qBACxD;iBACJ;gBAAC,OAAQ,GAAG,EAAG;oBACZ,MAAM,CAAC,KAAK,CAAE,gBAAgB,EAAE,GAAG,CAAE,CAAA;iBACxC;YACL,CAAC,CAAE,CAAA;YAEP,OAAO,OAAO,CAAA;QAClB,CAAC,CAAA;IACL,CAAC,CAAA;AACL,CAAC;AA1BD,sCA0BC","sourcesContent":["import * as _ from 'lodash'\n\nimport { EventEmitter } from '../event.emitter'\n\nimport '@bazook/errors'\nimport '@bazook/logger'\n\nexport function EmitOnSuccess( event: string, includeArgs: boolean = false, data?: any ): any {\n    return function ( target: any, propertyKey: string ): any {\n        let originalFunction = target[ propertyKey ]\n\n        return target[ propertyKey ] = function ( ...args: any[] ) {\n            let promise = originalFunction.apply( this, args )\n            promise\n                .then( ( response: any ) => {\n                    let message = { data: response }\n\n                    if ( includeArgs ) { message = _.extend( message, { args: args } ) }\n                    if ( data ) { message = _.extend( message, { ext: data } ) }\n                    \n                    try {\n                        let status = EventEmitter.emit( event, message )\n                        if ( !status || status === undefined ) {\n                            throw new NullError( 'Null Response. Unknown Error' )\n                        }\n                    } catch ( err ) {\n                        logger.error( 'Emit Failure: ', err )\n                    }\n                } )\n            \n            return promise\n        }\n    }\n}"]}