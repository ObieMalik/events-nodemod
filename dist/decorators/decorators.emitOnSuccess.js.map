{"version":3,"file":"decorators.emitOnSuccess.js","sourceRoot":"","sources":["../../src/decorators/decorators.emitOnSuccess.ts"],"names":[],"mappings":";;;AAAA,4BAA2B;AAE3B,oDAA+C;AAE/C,4CAA2C;AAC3C,4CAAwC;AAUxC,SAAS,aAAa,CAClB,KAAa,EACb,cAAuB,KAAK,EAC5B,IAAU;IACV,OAAO,UAAW,MAAW,EAAE,WAAmB;QAC9C,MAAM,gBAAgB,GAAG,MAAM,CAAE,WAAW,CAAE,CAAA;QAE9C,MAAM,CAAE,WAAW,CAAE,GAAG,UAAW,GAAG,IAAW;YAC7C,MAAM,OAAO,GAAG,gBAAgB,CAAC,KAAK,CAAE,IAAI,EAAE,IAAI,CAAE,CAAA;YAEpD,OAAO,CAAC,IAAI,CAAE,CAAE,QAAa,EAAG,EAAE;gBAC9B,IAAI,OAAO,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAA;gBAEhC,IAAK,WAAW,EAAG;oBACf,OAAO,GAAG,CAAC,CAAC,MAAM,CAAE,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAE,CAAA;iBAChD;gBAED,IAAK,IAAI,EAAG;oBACR,OAAO,GAAG,CAAC,CAAC,MAAM,CAAE,OAAO,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAE,CAAA;iBAC/C;gBAED,IAAI;oBACA,MAAM,MAAM,GAAG,4BAAY,CAAC,IAAI,CAAE,KAAK,EAAE,OAAO,CAAE,CAAA;oBAElD,IAAK,CAAC,MAAM,IAAI,MAAM,KAAK,SAAS,EAAG;wBACnC,MAAM,IAAI,kBAAS,CAAE,8BAA8B,CAAE,CAAA;qBACxD;iBACJ;gBAAC,OAAQ,GAAG,EAAG;oBACZ,eAAM,CAAC,KAAK,CAAE,gBAAgB,EAAE,GAAG,CAAE,CAAA;iBACxC;YACL,CAAC,CAAE,CAAA;YAEH,OAAO,OAAO,CAAA;QAClB,CAAC,CAAA;QAED,OAAO,MAAM,CAAE,WAAW,CAAE,CAAA;IAChC,CAAC,CAAA;AACL,CAAC;AAGoB,sCAAa","sourcesContent":["import * as _ from 'lodash'\n\nimport { EventEmitter } from '../event.emitter'\n\nimport { NullError } from '@om-node/errors'\nimport { logger } from '@om-node/logger'\n\n/**\n * EmitOnSuccess - \n * Decorator to be used on controllers only.\n * @param {string} event Event Name\n * @param {boolean} includeArgs Include decorated function arguments\n * @param {object} data Data emitted to the event\n * @return {function} originalFunction\n */\nfunction emitOnSuccess(\n    event: string,\n    includeArgs: boolean = false,\n    data?: any ): any {\n    return function ( target: any, propertyKey: string ): any {\n        const originalFunction = target[ propertyKey ]\n\n        target[ propertyKey ] = function ( ...args: any[] ) {\n            const promise = originalFunction.apply( this, args )\n\n            promise.then( ( response: any ) => {\n                let message = { data: response }\n\n                if ( includeArgs ) {\n                    message = _.extend( message, { args: args } )\n                }\n\n                if ( data ) {\n                    message = _.extend( message, { ext: data } )\n                }\n\n                try {\n                    const status = EventEmitter.emit( event, message )\n\n                    if ( !status || status === undefined ) {\n                        throw new NullError( 'Null Response. Unknown Error' )\n                    }\n                } catch ( err ) {\n                    logger.error( 'Emit Failure: ', err )\n                }\n            } )\n\n            return promise\n        }\n\n        return target[ propertyKey ]\n    }\n}\n\nexport {\n    emitOnSuccess as EmitOnSuccess\n}"]}